import * as THREE from 'three'

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { useThree } from "@react-three/fiber";

export default function Model(props) {

  // Camera

  // let orbit;

  // document.addEventListener('mousemove', (e) => {
  //   let scale = -0.01;
  //   orbit.rotateY( e.movementX * scale );
  //   orbit.rotateX( e.movementY * scale ); 
  //   orbit.rotation.z = 0; //this is important to keep the camera level..
  // })

  // //the camera rotation pivot
  // orbit = new THREE.Object3D();
  // orbit.rotation.order = "YXZ"; //this is important to keep level, so Z should be the last axis to rotate in order...
  // orbit.position.set(0,0,0)
  // scene.add(orbit );

  // const { camera } = useThree()
  // camera.position.set(0.5, 1.5, 0)
  // camera.rotateY = Math.PI / 2


  // Load

  const group = useRef();
  const { nodes, materials } = useGLTF("/Garfield.gltf");


  // Materials

  const map = useTexture('./textures/diffuse.jpg')
  map.flipY = false

  const arm = useTexture('./textures/arm.jpg')
  arm.flipY = false

  const normal = useTexture('./textures/normal.jpg')
  normal.flipY = false

  const roughness = useTexture('./textures/roughness.jpg')
  roughness.flipY = false

  const metalness = useTexture('./textures/metalness.jpg')
  metalness.flipY = false

  const lightmap = useTexture('./textures/lightmap.jpg')
  lightmap.flipY = false

  const emissive = useTexture('./textures/emission.jpg')
  emissive.flipY = false

  const tv = useTexture('./textures/tv.jpg')
  // tv.flipY = false
  

  // const ao = useTexture('./textures/ao.jpg')
  // ao.flipY = false


  const material = materials["Null Texture"]


  // material.emissive = new THREE.Color('red')

  material.map = map
  material.emissiveMap = emissive
  material.emissiveIntensity = 1
  material.normalMap = normal
  material.lightMap = lightmap

  // material.aoMap = arm
  material.roughnessMap = arm
  material.metalnessMap = arm

  

  // console.log(material)


  return (
    <group ref={group} {...props} dispose={null} >
      <mesh
        geometry={nodes.Joined001.geometry}
        material={material}
      />


      <mesh position={[-0.165,1.06,2.22]} rotation={[0, Math.PI / 1, 0]}>
        <planeGeometry args={[1.055,0.6]} />
        <meshStandardMaterial emissive={'white'} emissiveMap={tv} emissiveIntensity={2} />
     </mesh>

    </group>
  );
}

useGLTF.preload("/Garfield.gltf");